(ns smeghead\pdo
  (:require smeghead\pdo\statement))

(defstruct connection [pdo])

(defn set-attribute
  "Set an attribute"
  [conn attribute value]
  (php/-> (conn :pdo) (setAttribute attribute value)))

(defn get-attribute
  "Retrieve a database connection attribute"
  [conn attribute]
  (php/-> (conn :pdo) (getAttribute attribute)))

(defn connect
  "Connect database and return connection object.
  Throws a PDOException if the attempt to connect to the requested database fails "
  [dsn & [username password options]]
  (let [conn (connection (php/new \PDO dsn username password options))]
    (set-attribute conn (php/:: \PDO ATTR_ERRMODE) (php/:: \PDO ERRMODE_EXCEPTION))
    conn))

(defn exec
  "Execute an SQL statement and return the number of affected rows"
  [conn stmt]
  (php/-> (conn :pdo) (exec stmt)))

(defn prepare
  "Prepares a statement for execution and returns a statement object"
  [conn stmt & [options]]
  (statement/statement (php/-> (conn :pdo) (prepare stmt (to-php-array (or options {}))))))

(defn query
  "Prepares and executes an SQL statement without placeholders"
  [conn stmt & [fetch-mode]]
  (statement/statement (php/-> (conn :pdo) (query stmt (or fetch-mode (php/:: \PDO FETCH_ASSOC))))))

(defn begin
  "Initiates a transaction"
  [conn]
  (php/-> (conn :pdo) (beginTransaction)))

(defn rollback
  "Rolls back a transaction"
  [conn]
  (php/-> (conn :pdo) (rollback)))

(defn commit
  "Commits a transaction"
  [conn]
  (php/-> (conn :pdo) (commit)))

(defn quote
  "Quotes a string for use in a query"
  [conn string & [type]]
  (php/-> (conn :pdo) (quote string (or type (php/:: \PDO PARAM_STR)))))

(defn last-insert-id
  "Returns the ID of the last inserted row or sequence value"
  [conn]
  (php/intval (php/-> (conn :pdo) (lastInsertId))))

(defn error-code
  "Fetch the SQLSTATE associated with the last operation on the database handle"
  [conn]
  (php/intval (php/-> (conn :pdo) (errorCode))))

(defn error-info
  "Fetch extended error information associated with the last operation on the database handle"
  [conn]
  (let [[error-code driver-error-code driver-message] (values (php-array-to-map (php/-> (conn :pdo) (errorInfo))))]
    [(php/intval error-code) (php/intval driver-error-code) driver-message]))

(defn in-transaction
  "Checks if inside a transaction"
  [conn]
  (php/-> (conn :pdo) (inTransaction)))

(defn get-available-drivers
  "Return an array of available PDO drivers"
  [conn]
  (values (php-array-to-map (php/-> (conn :pdo) (getAvailableDrivers)))))

